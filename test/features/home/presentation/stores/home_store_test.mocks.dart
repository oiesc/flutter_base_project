// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_base_project/test/features/home/presentation/stores/home_store_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_base_project/features/home/domain/models/home_image.dart'
    as _i7;
import 'package:flutter_base_project/features/home/domain/usecases/home_usecase.dart'
    as _i3;
import 'package:flutter_base_project/features/home/infrastructure/repositories/home_repository.dart'
    as _i2;
import 'package:flutter_base_project/global/app_core/domain/models/either.dart'
    as _i5;
import 'package:flutter_base_project/global/app_core/failures/app_failure.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHomeRepository_0 extends _i1.SmartFake
    implements _i2.HomeRepository {
  _FakeHomeRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [HomeUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeUsecase extends _i1.Mock implements _i3.HomeUsecase {
  MockHomeUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HomeRepository get homeRepository =>
      (super.noSuchMethod(
            Invocation.getter(#homeRepository),
            returnValue: _FakeHomeRepository_0(
              this,
              Invocation.getter(#homeRepository),
            ),
          )
          as _i2.HomeRepository);

  @override
  _i4.Future<_i5.Either<_i6.AppGenericFailure, _i7.HomeImage>> loadHomeData() =>
      (super.noSuchMethod(
            Invocation.method(#loadHomeData, []),
            returnValue:
                _i4.Future<
                  _i5.Either<_i6.AppGenericFailure, _i7.HomeImage>
                >.value(
                  _i8.dummyValue<
                    _i5.Either<_i6.AppGenericFailure, _i7.HomeImage>
                  >(this, Invocation.method(#loadHomeData, [])),
                ),
          )
          as _i4.Future<_i5.Either<_i6.AppGenericFailure, _i7.HomeImage>>);
}

/// A class which mocks [HomeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeRepository extends _i1.Mock implements _i2.HomeRepository {
  MockHomeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i5.Either<_i6.AppGenericFailure, _i7.HomeImage>> loadHomeData() =>
      (super.noSuchMethod(
            Invocation.method(#loadHomeData, []),
            returnValue:
                _i4.Future<
                  _i5.Either<_i6.AppGenericFailure, _i7.HomeImage>
                >.value(
                  _i8.dummyValue<
                    _i5.Either<_i6.AppGenericFailure, _i7.HomeImage>
                  >(this, Invocation.method(#loadHomeData, [])),
                ),
          )
          as _i4.Future<_i5.Either<_i6.AppGenericFailure, _i7.HomeImage>>);
}
